{
  "problems": [
    {
      "id": "mirror_phrase_check",
      "idNum": 1,
      "leetcodeId": 125,
      "source": "LeetCode",
      "title": "Mirror Phrase Check",
      "difficulty": "Easy",

      "description": "A message is considered a *mirror phrase* if, after removing every character that is **not** a letter or digit and ignoring letter-case, it reads the same backward as forward.\n\nWrite a function that returns **true** when a given string meets this definition and **false** otherwise.",
      "example": "Example 1:\nInput: msg = \"Race car!\"\nOutput: true\nExplanation: Cleanup ⇒ \"racecar\" which is symmetric.\n\nExample 2:\nInput: msg = \"hello world\"\nOutput: false\n\nExample 3:\nInput: msg = \"0P\"\nOutput: false\n\nExample 4:\nInput: msg = \" \"\nOutput: true  // only symbols → empty string after cleanup.",
      "constraints": "Constraints:\n1 <= msg.length <= 200 000",
      "language": "java",

      "boilerplate": [
        "class Solution {",
        "    public boolean isMirrorPhrase(String msg) {",
        "        /* Line 1 */ // remove symbols & punctuation",
        "        /* Line 2 */ // convert to lowercase",
        "        /* Line 3 */ // left pointer",
        "        /* Line 4 */ // right pointer",
        "        /* Line 5 */ // walk toward center",
        "        /* Line 6 */ // mismatch → false",
        "        /* Line 7 */ // advance pointers",
        "        /* Line 8 */ // all matched → true",
        "    }",
        "}"
      ],

      "steps": [
        {
          "placeholder": "/* Line 1 */",
          "comment": "// remove symbols & punctuation",
          "options": [
            "msg = msg.replaceAll(\"[^A-Za-z0-9]\", \"\");",
            "msg = msg.toLowerCase();",
            "msg = msg.trim();",
            "msg = msg.substring(1);"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 2 */",
          "comment": "// convert to lowercase",
          "options": [
            "msg = msg.toLowerCase();",
            "msg = msg.toUpperCase();",
            "msg = msg.replace(\" \", \"\");",
            "continue;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 3 */",
          "comment": "// left pointer",
          "options": [
            "int left = 0;",
            "int right = 0;",
            "int i = 0;",
            "int left = 1;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 4 */",
          "comment": "// right pointer",
          "options": [
            "int right = msg.length() - 1;",
            "int left = msg.length() - 1;",
            "int right = msg.length();",
            "int right = 0;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 5 */",
          "comment": "// walk toward centre",
          "options": [
            "while (left < right) {",
            "for (int i = 0; i < right; i++) {",
            "while (left <= right) {",
            "do {"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 6 */",
          "comment": "// mismatch → false",
          "options": [
            "if (msg.charAt(left) != msg.charAt(right)) return false;",
            "if (msg.charAt(left) == msg.charAt(right)) return false;",
            "if (left == right) break;",
            "continue;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 7 */",
          "comment": "// advance pointers",
          "options": [
            "left++; right--;",
            "left--; right++;",
            "left++;",
            "right--;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 8 */",
          "comment": "// all matched → true",
          "options": ["return true;", "return false;", "break;", "continue;"],
          "answerIndex": 0
        }
      ]
    },
    {
      "id": "ordered_substring_test",
      "idNum": 2,
      "leetcodeId": 392,
      "source": "LeetCode",
      "title": "Ordered Substring Test",
      "difficulty": "Easy",

      "description": "Given two lowercase strings `src` and `target`, decide whether every character of `src` appears inside `target` **in the same order** (though not necessarily contiguously). If that is the case, return `true`; otherwise return `false`.",
      "example": "Example 1:\nInput: src = \"ace\",  target = \"abcde\"\nOutput: true  // a-c-e are found in order\n\nExample 2:\nInput: src = \"axc\",  target = \"ahbgdc\"\nOutput: false\n\nExample 3:\nInput: src = \"\",    target = \"any\"\nOutput: true  // empty string is trivially ordered",
      "constraints": "Constraints:\n0 <= src.length <= 100\n0 <= target.length <= 10 000\nBoth strings consist of lowercase English letters only.",
      "language": "java",

      "boilerplate": [
        "class Solution {",
        "    public boolean isOrderedSubstring(String src, String target) {",
        "        /* Line 1 */ // empty src is always true",
        "        /* Line 2 */ // pointer i for src",
        "        /* Line 3 */ // pointer j for target",
        "        /* Line 4 */ // walk through target",
        "        /* Line 5 */ // on match: advance i",
        "        /* Line 6 */ // always advance j",
        "        /* Line 7 */ // done? compare i to src length",
        "    }",
        "}"
      ],

      "steps": [
        {
          "placeholder": "/* Line 1 */",
          "comment": "// empty src",
          "options": [
            "if (src.isEmpty()) return true;",
            "if (target.isEmpty()) return false;",
            "if (src == null) return false;",
            "return false;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 2 */",
          "comment": "// pointer i",
          "options": [
            "int i = 0;",
            "int j = 0;",
            "int ptr = 0;",
            "int i = src.length();"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 3 */",
          "comment": "// pointer j",
          "options": [
            "int j = 0;",
            "int i = 0;",
            "int ptr = 0;",
            "int j = target.length();"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 4 */",
          "comment": "// walk target",
          "options": [
            "while (i < src.length() && j < target.length()) {",
            "for (char c : target.toCharArray()) {",
            "while (j < target.length()) {",
            "do {"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 5 */",
          "comment": "// match → i++",
          "options": [
            "if (src.charAt(i) == target.charAt(j)) i++;",
            "if (src.charAt(i) != target.charAt(j)) i++;",
            "if (target.charAt(i) == src.charAt(j)) i++;",
            "continue;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 6 */",
          "comment": "// always j++",
          "options": ["j++;", "i++;", "continue;", "j--;"],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 7 */",
          "comment": "// success?",
          "options": [
            "return i == src.length();",
            "return j == target.length();",
            "return true;",
            "return false;"
          ],
          "answerIndex": 0
        }
      ]
    },
    {
      "id": "index_pair_target_sum",
      "idNum": 3,
      "leetcodeId": 167,
      "source": "LeetCode",
      "title": "Index Pair with Target Sum",
      "difficulty": "Medium",

      "description": "You receive a **1-indexed** array `vals` that is already sorted in non-decreasing order. Find two different elements whose values add up to `goal` and return their *indices* (1-based) as `[i, j]` with `i < j`. Exactly one valid pair exists and only constant extra space may be used.",
      "example": "Example 1:\nInput: vals = [1,4,6,8,11],  goal = 10\nOutput: [2,3]  // 4 + 6 = 10\n\nExample 2:\nInput: vals = [-3,-1,2,5],  goal = 1\nOutput: [1,4]\n\nExample 3:\nInput: vals = [2,3,4],       goal = 6\nOutput: [1,3]",
      "constraints": "Constraints:\n2 <= vals.length <= 30 000\n-1000 <= vals[i] <= 1000\n-1000 <= goal <= 1000\nThe array is sorted in non-decreasing order and exactly one solution exists.",
      "language": "java",

      "boilerplate": [
        "class Solution {",
        "    public int[] findPair(int[] vals, int goal) {",
        "        /* Line 1 */ // left index",
        "        /* Line 2 */ // right index",
        "        /* Line 3 */ // loop until they cross",
        "        /* Line 4 */ // compute sum",
        "        /* Line 5 */ // if match → return 1-based indices",
        "        /* Line 6 */ // sum too small → move left",
        "        /* Line 7 */ // sum too large → move right",
        "        /* Line 8 */ // unreachable safeguard",
        "    }",
        "}"
      ],

      "steps": [
        {
          "placeholder": "/* Line 1 */",
          "comment": "// left index",
          "options": [
            "int left = 0;",
            "int left = 1;",
            "int right = 0;",
            "int i = 0;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 2 */",
          "comment": "// right index",
          "options": [
            "int right = vals.length - 1;",
            "int right = vals.length;",
            "int left = vals.length - 1;",
            "int[] p = new int[2];"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 3 */",
          "comment": "// loop",
          "options": [
            "while (left < right) {",
            "for (int k = 0; k < right; k++) {",
            "while (left <= right) {",
            "do {"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 4 */",
          "comment": "// compute sum",
          "options": [
            "int sum = vals[left] + vals[right];",
            "int sum = vals[right] - vals[left];",
            "int sum = goal - vals[left];",
            "int sum = left + right;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 5 */",
          "comment": "// match → return",
          "options": [
            "if (sum == goal) return new int[]{left + 1, right + 1};",
            "if (sum == goal) return new int[]{left, right};",
            "if (sum != goal) return new int[]{-1,-1};",
            "break;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 6 */",
          "comment": "// sum too small",
          "options": [
            "if (sum < goal) { left++; continue; }",
            "if (sum < goal) right--;",
            "if (sum < goal) left--;",
            "continue;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 7 */",
          "comment": "// sum too large",
          "options": ["right--;", "left++;", "left--;", "break;"],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 8 */",
          "comment": "// safeguard",
          "options": [
            "return new int[]{-1, -1};",
            "return null;",
            "return new int[0];",
            "continue;"
          ],
          "answerIndex": 0
        }
      ]
    },
    {
      "id": "maximum_water_capacity",
      "idNum": 4,
      "source": "LeetCode",
      "leetcodeId": 11,
      "title": "Maximum Water Capacity",
      "difficulty": "Medium",

      "description": "You are given an array `walls` where the *i-th* value is the height of a vertical wall drawn at coordinate *i*. Picking any two walls and using the X-axis as the base creates a tank. Your task is to find the pair that holds the greatest volume of water and return that volume.",
      "example": "Example 1:\nInput: walls = [1,8,6,2,5,4,8,3,7]\nOutput: 49\n\nExample 2:\nInput: walls = [1,1]\nOutput: 1",
      "constraints": "Constraints:\n2 <= walls.length <= 100 000\n0 <= walls[i] <= 10 000",
      "language": "java",

      "boilerplate": [
        "class Solution {",
        "    public int maxCapacity(int[] walls) {",
        "        /* Line 1 */ // pointer a at start",
        "        /* Line 2 */ // pointer b at end",
        "        /* Line 3 */ // best volume so far",
        "        /* Line 4 */ // iterate while a < b",
        "        /* Line 5 */ // compute current volume",
        "        /* Line 6 */ // store larger volume",
        "        /* Line 7 */ // advance pointer with shorter wall",
        "        /* Line 8 */ // loop ends",
        "        /* Line 9 */ // final answer",
        "    }",
        "}"
      ],

      "steps": [
        {
          "placeholder": "/* Line 1 */",
          "comment": "// pointer a at start",
          "options": ["int a = 0;", "int b = 0;", "int a = 1;", "int i = 0;"],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 2 */",
          "comment": "// pointer b at end",
          "options": [
            "int b = walls.length - 1;",
            "int a = walls.length - 1;",
            "int b = walls.length;",
            "int[] idx = new int[2];"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 3 */",
          "comment": "// best volume so far",
          "options": [
            "int best = 0;",
            "int cap = 0;",
            "int best = Integer.MIN_VALUE;",
            "int sum = 0;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 4 */",
          "comment": "// iterate while a < b",
          "options": [
            "while (a < b) {",
            "for (int k = 0; k < b; k++) {",
            "while (a <= b) {",
            "do {"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 5 */",
          "comment": "// compute current volume",
          "options": [
            "int vol = Math.min(walls[a], walls[b]) * (b - a);",
            "int vol = walls[a] + walls[b];",
            "int vol = Math.max(walls[a], walls[b]);",
            "int vol = b - a;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 6 */",
          "comment": "// store larger volume",
          "options": [
            "best = Math.max(best, vol);",
            "if (vol > best) best = vol;",
            "best += vol;",
            "continue;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 7 */",
          "comment": "// advance pointer with shorter wall",
          "options": [
            "if (walls[a] < walls[b]) a++; else b--;",
            "a++; b--;",
            "if (walls[a] > walls[b]) a++; else b--;",
            "b--; a++;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 8 */",
          "comment": "// loop ends",
          "options": ["}", "break;", "continue;", "{"],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 9 */",
          "comment": "// final answer",
          "options": ["return best;", "return vol;", "return -1;", "return 0;"],
          "answerIndex": 0
        }
      ]
    },
    {
      "id": "zero_sum_triplets",
      "idNum": 5,
      "leetcodeId": 15,
      "source": "LeetCode",
      "title": "Zero-Sum Triplets",
      "difficulty": "Medium",

      "description": "Given an integer array `vals`, return every distinct triple `[vals[a], vals[b], vals[c]]` with `a ≠ b ≠ c` such that the three numbers add to **zero**.  The answer must not contain duplicate triples (order inside the triple or the list does not matter).",
      "example": "Example 1:\nInput: vals = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\n\nExample 2:\nInput: vals = [0,1,1]\nOutput: []\n\nExample 3:\nInput: vals = [0,0,0]\nOutput: [[0,0,0]]",
      "constraints": "Constraints:\n3 ≤ vals.length ≤ 3 000\n-100 000 ≤ vals[i] ≤ 100 000",
      "language": "java",

      "boilerplate": [
        "class Solution {",
        "    public List<List<Integer>> zeroSumTriplets(int[] vals) {",
        "        /* Line 1 */ // sort input",
        "        /* Line 2 */ // container for results",
        "        /* Line 3 */ // scan each 'a' index",
        "        /* Line 4 */ // skip duplicate 'a'",
        "        /* Line 5 */ // two-pointer setup for b & c",
        "        /* Line 6 */ // iterate while b < c",
        "        /* Line 7 */ // measure triple sum",
        "        /* Line 8 */ // sum == 0 → record & dedup",
        "        /* Line 9 */ // sum < 0  → advance b",
        "        /* Line 10 */ // sum > 0 → retreat c",
        "        /* Line 11 */ // after loops return list",
        "    }",
        "}"
      ],

      "steps": [
        {
          "placeholder": "/* Line 1 */",
          "comment": "// sort input",
          "options": [
            "Arrays.sort(vals);",
            "Collections.sort(Arrays.asList(vals));",
            "int[] sorted = vals.clone();",
            "Arrays.stream(vals).sorted();"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 2 */",
          "comment": "// container",
          "options": [
            "List<List<Integer>> res = new ArrayList<>();",
            "Set<List<Integer>> res = new HashSet<>();",
            "List<int[]> res = new ArrayList<>();",
            "List<List<Integer>> res = Collections.emptyList();"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 3 */",
          "comment": "// scan a",
          "options": [
            "for (int a = 0; a < vals.length - 2; a++) {",
            "for (int a = 0; a <= vals.length - 3; a++) {",
            "int a = 0;",
            "while (true) {"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 4 */",
          "comment": "// skip dup a",
          "options": [
            "if (a > 0 && vals[a] == vals[a - 1]) continue;",
            "if (vals[a] == vals[a + 1]) continue;",
            "if (a == 0) continue;",
            "continue;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 5 */",
          "comment": "// two-ptr setup",
          "options": [
            "int b = a + 1, c = vals.length - 1;",
            "int b = 0, c = a - 1;",
            "int c = a + 1;",
            "int[] ptr = new int[2];"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 6 */",
          "comment": "// loop b < c",
          "options": [
            "while (b < c) {",
            "for (int j = b; j < c; j++) {",
            "do {",
            "while (b <= c) {"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 7 */",
          "comment": "// triple sum",
          "options": [
            "int sum = vals[a] + vals[b] + vals[c];",
            "int sum = vals[b] + vals[c];",
            "int sum = vals[a] + vals[b];",
            "int sum = vals[a] + vals[c];"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 8 */",
          "comment": "// sum == 0",
          "options": [
            "if (sum == 0) { res.add(Arrays.asList(vals[a], vals[b], vals[c]));\n    while (b < c && vals[b] == vals[b + 1]) b++;\n    while (b < c && vals[c] == vals[c - 1]) c--; b++; c--; }",
            "if (sum == 0) res.add(Arrays.asList(vals[a], vals[b], vals[c]));",
            "if (sum == 0) return res;",
            "if (sum != 0) continue;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 9 */",
          "comment": "// sum < 0",
          "options": [
            "else if (sum < 0) b++;",
            "else if (sum < 0) c--;",
            "if (sum < 0) b--;",
            "continue;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 10 */",
          "comment": "// sum > 0",
          "options": [
            "else c--;",
            "else b++;",
            "else if (sum > 0) b++;",
            "break;"
          ],
          "answerIndex": 0
        },
        {
          "placeholder": "/* Line 11 */",
          "comment": "// return list",
          "options": [
            "return res;",
            "return new ArrayList<>();",
            "return null;",
            "break;"
          ],
          "answerIndex": 0
        }
      ]
    }
  ]
}
